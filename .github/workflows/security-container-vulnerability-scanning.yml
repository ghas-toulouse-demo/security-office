name: Container Vulnerability Scan

on:

  workflow_dispatch:
    inputs:
      container_image:
        description: The full container image to scan.
        required: true
        type: string

      container_type:
        description: The type of container
        required: true
        type: string

      container_digest:
        description: The container image digest for the image.
        required: true
        type: string

      commit_ref:
        description: The commit ref where the results will be uploaded
        required: true
        type: string
        
      commit_sha:
        description: The commit SHA that was used to build the container
        required: true
        type: string

      severity_cutoff:
        description: The minimum vulnerability severity to trigger a failure in scan results
        required: false
        default: critical
        type: string
        
  workflow_call:
    inputs:
      container_image:
        description: The full container image to scan.
        required: true
        type: string

      container_type:
        description: The type of container
        required: true
        type: string

      container_digest:
        description: The container image digest for the image.
        required: true
        type: string

      commit_ref:
        description: The commit ref where the results will be uploaded
        required: true
        type: string
        
      commit_sha:
        description: The commit SHA that was used to build the container
        required: true
        type: string

      severity_cutoff:
        description: The minimum vulnerability severity to trigger a failure in scan results
        required: false
        default: critical
        type: string

jobs:
  initialize:
    name: Initialize

    runs-on: ubuntu-20.04

    permissions:
      statuses: write

    outputs:
      severity_cutoff: ${{ steps.validate.outputs.severity_cutoff }}

    steps:
      - name: Validate container scanning engine
        id: validate
        uses: actions/github-script@v6
        env:
          CONTAINER_IMAGE: "${{ inputs.container_image }}"
          SEVERITY_CUTOFF: "${{ inputs.severity_cutoff }}"
        with:
          script: |
            const containerImage = process.env.CONTAINER_IMAGE;

            if (containerImage.length === 0) {
              core.setFailed(`No valid container image provided for scanning, check 'container_image' input value; '${containerImage}'`)
            }

            const supportedSeverities = [
              'critical',
              'high',
              'medium',
              'low',
              'negligible',
            ];

            if (supportedSeverities.includes(process.env.SEVERITY_CUTOFF)) {
              core.setOutput('severity_cutoff', process.env.SEVERITY_CUTOFF);
            } else {
              core.setFailed(`Invlaid severity cutoff specified '${process.env.SEVERITY_CUTOFF}', must be one of ${JSON.stringify(supportedSeverities)}`);
            }
            
            core.startGroup('context');
            core.info(JSON.stringify(context, null, 2));
            core.endGroup();


      - name: Publish Container Scanning as a Status Pending
        id: container_image_status
        uses: octodemo/github-status-action@v3
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          state: pending
          sha: ${{ inputs.commit_sha }}
          context: Container Vulnerabilty Scan - ${{ inputs.container_type }}
          description: InfoSec Vulnerability Checks


  anchore_container_scan:
    name: Anchore Container Vulnerability Scan

    runs-on: ubuntu-20.04

    needs:
      - initialize

    permissions:
      contents: read
      packages: read
      actions: read
      security-events: write

    steps:
      # This source code checkout is required for the CodeQL SARIF upload to function correctly later, as it looks for these refs using git
      - name: Checkout Sources
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.sha }}
          
      - name: Sign in to GitHub Container Registry
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io

      - name: Scan Container Image
        id: scan_container
        uses: anchore/scan-action@v3
        with:
          image: ${{ inputs.container_image }}
          fail-build: false
          severity-cutoff: ${{ needs.initialize.outputs.severity_cutoff }}

      - name: Display SARIF report data
        if: always()
        run: cat ${{ steps.scan_container.outputs.sarif }}

      - name: Upload Anchore scan SARIF report
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan_container.outputs.sarif }}
          ref: ${{ inputs.commit_ref }}
          sha: ${{ inputs.commit_sha }}


  sign_container:
    name: Sign Valid Containers

    runs-on: ubuntu-20.04

    needs:
      - initialize
      - anchore_container_scan

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge with sigstore/fulcio when running outside of PRs.
      id-token: write
      # Used by the status update that tracks the container
      statuses: write

    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v2.3.0
        with:
          cosign-release: "v1.13.1"

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

        # Sign the resulting Docker image digest, this will use the public Fulcio instance, rekor.sigstore.dev to store this data
        # it is possible to use your own server instance for this
      - name: Sign the published container image
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate against the sigstore community Fulcio instance.
        run: |
          cosign sign ${{ inputs.container_image }}@${{ inputs.container_digest }} --force


  record_vulnerability_status:
    name: Update Vulnerability Commit Status
    if: always()

    runs-on: ubuntu-20.04

    needs:
      - initialize
      - anchore_container_scan

    permissions:
      statuses: write

    steps:
      - name: Get final status
        id: vulnerability_status
        uses: actions/github-script@v6
        env:
          SCANNING_WORKFLOW_RESULT: ${{ needs.anchore_container_scan.result }}
        with:
          script: |
            const result = process.env.SCANNING_WORKFLOW_RESULT;

            let status = 'error';
            if (result === 'success' || result === 'failure') {
              status = result
            }
            core.setOutput('status', status);
            core.setOutput('description', result);

      - name: Publish Container Scanning as a Status
        id: container_image_status
        uses: octodemo/github-status-action@v3
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          state: ${{ steps.vulnerability_status.outputs.status }}
          sha: ${{ inputs.commit_sha }}
          context: Container Vulnerabilty Scan - ${{ inputs.container_type }}
          description: InfoSec Vulnerability Checks - ${{ steps.vulnerability_status.outputs.description }}
tg